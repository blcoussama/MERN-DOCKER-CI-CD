# docker-compose.prod.yml - Production Configuration

version: '3.8'

services:
  # MongoDB with authentication
  mongodb:
    image: mongo:7.0
    container_name: profyle-mongo-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password
      MONGO_INITDB_DATABASE: profyle
    volumes:
      - mongodb_data:/data/db
    networks:
      - profyle-network
    secrets:
      - mongo_root_username
      - mongo_root_password
    # Don't expose MongoDB port in production (internal only)
    # ports:
    #   - "27017:27017"

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: profyle-backend-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=4000
    env_file:
      - .env.prod
    depends_on:
      - mongodb
    networks:
      - profyle-network
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service (nginx serving built React app)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: profyle-frontend-prod
    restart: always
    ports:
      - '80:80'
      - '443:443' # For HTTPS
    depends_on:
      - backend
    networks:
      - profyle-network
    volumes:
      # Mount SSL certificates for HTTPS
      - ./ssl:/etc/ssl/certs:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: profyle-redis-prod
    restart: always
    command: >
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - profyle-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Nginx reverse proxy (optional, for load balancing)
  nginx-proxy:
    image: nginx:alpine
    container_name: profyle-nginx-proxy
    restart: always
    ports:
      - '8080:80'
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - profyle-network

# Networks
networks:
  profyle-network:
    driver: bridge

# Volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# Secrets for sensitive data
secrets:
  mongo_root_username:
    file: ./secrets/mongo_root_username.txt
  mongo_root_password:
    file: ./secrets/mongo_root_password.txt
# Production considerations:
# 1. No port exposure for internal services (MongoDB, Redis)
# 2. Resource limits to prevent resource exhaustion
# 3. Secrets management for sensitive data
# 4. Always restart policy for high availability
# 5. Health checks for service monitoring
# 6. SSL/TLS support for HTTPS
# 7. Reverse proxy for load balancing
