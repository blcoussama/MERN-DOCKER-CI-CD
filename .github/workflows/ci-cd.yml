# .github/workflows/ci-cd.yml
# Complete CI/CD Pipeline for PROFYLE - FIXED FOR MONOREPO

name: 🚀 CI/CD Pipeline

# Trigger the workflow
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Environment variables
env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Setup Node.js WITHOUT automatic caching (monorepo issue fix)
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Removed 'cache: npm' - this was causing the error!

      # Manual caching for better monorepo support
      - name: 📦 Cache Backend Dependencies
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: 📦 Cache Frontend Dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      # Install dependencies
      - name: 📦 Install Backend Dependencies
        working-directory: backend
        run: npm ci

      - name: 📦 Install Frontend Dependencies
        working-directory: frontend
        run: npm ci

      # Lint code
      - name: 🔍 Lint Backend Code
        working-directory: backend
        run: npm run lint

      - name: 🔍 Lint Frontend Code
        working-directory: frontend
        run: npm run lint

      # Run tests
      - name: 🧪 Run Backend Tests
        working-directory: backend
        run: npm test

      - name: 🧪 Run Frontend Tests  
        working-directory: frontend
        run: npm run test:run

      # Build application
      - name: 🏗️ Build Frontend Application
        working-directory: frontend
        run: npm run build

      # Upload build artifacts
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: frontend/dist/

  # Job 2: Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Audit dependencies for vulnerabilities
      - name: 🔍 Audit Backend Dependencies
        working-directory: backend
        run: |
          npm ci
          npm audit --audit-level=high
        continue-on-error: true

      - name: 🔍 Audit Frontend Dependencies
        working-directory: frontend
        run: |
          npm ci
          npm audit --audit-level=high
        continue-on-error: true

      # CodeQL Analysis
      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 3: Docker Build (Optional)
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Test Docker builds
      - name: 🐳 Test Backend Docker Build
        working-directory: backend
        run: docker build -t backend-test .

      - name: 🐳 Test Frontend Docker Build
        working-directory: frontend
        run: docker build -t frontend-test .

      - name: 🐳 Test Development Docker Compose
        run: docker-compose -f docker-compose.dev.yml build

  # Job 4: Deploy to Staging (when pushing to develop)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Deploy to staging environment
      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: curl -X POST "$STAGING_WEBHOOK_URL"

  # Job 5: Deploy to Production (when pushing to main)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-app.onrender.com
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Deploy to production (Render)
      - name: 🚀 Deploy to Production
        run: |
          echo "🚀 Deploying to production..."
          # Render auto-deploys from main branch
          # This job mainly serves as a checkpoint

      # Notify deployment
      - name: 📢 Notify Deployment Success
        run: |
          echo "✅ Deployment to production completed successfully!"
          # Add Slack/Discord notification here if desired

  # Job 6: End-to-End Tests (after deployment)
  e2e-tests:
    name: 🔄 End-to-End Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Dependencies
        working-directory: frontend
        run: npm ci

      # Run E2E tests against production
      - name: 🔄 Run E2E Tests
        run: |
          echo "🔄 Running E2E tests against production..."
          # npm run e2e --prefix frontend
          # Add your Cypress or Playwright tests here

      # Rollback if E2E tests fail
      - name: ⚠️ Rollback if E2E Fails
        if: failure()
        run: |
          echo "❌ E2E tests failed! Consider rollback..."
          # Add rollback logic here